// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/match-schedule.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MatchScheduleReq struct {
	PlayerNum            int32    `protobuf:"varint,1,opt,name=playerNum,proto3" json:"playerNum,omitempty"`
	FieldNum             int32    `protobuf:"varint,2,opt,name=fieldNum,proto3" json:"fieldNum,omitempty"`
	RoundNum             int32    `protobuf:"varint,3,opt,name=roundNum,proto3" json:"roundNum,omitempty"`
	Mode                 int32    `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Amplitude            int32    `protobuf:"varint,5,opt,name=amplitude,proto3" json:"amplitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchScheduleReq) Reset()         { *m = MatchScheduleReq{} }
func (m *MatchScheduleReq) String() string { return proto.CompactTextString(m) }
func (*MatchScheduleReq) ProtoMessage()    {}
func (*MatchScheduleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f34c81a8fca3de3, []int{0}
}

func (m *MatchScheduleReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchScheduleReq.Unmarshal(m, b)
}
func (m *MatchScheduleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchScheduleReq.Marshal(b, m, deterministic)
}
func (m *MatchScheduleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchScheduleReq.Merge(m, src)
}
func (m *MatchScheduleReq) XXX_Size() int {
	return xxx_messageInfo_MatchScheduleReq.Size(m)
}
func (m *MatchScheduleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchScheduleReq.DiscardUnknown(m)
}

var xxx_messageInfo_MatchScheduleReq proto.InternalMessageInfo

func (m *MatchScheduleReq) GetPlayerNum() int32 {
	if m != nil {
		return m.PlayerNum
	}
	return 0
}

func (m *MatchScheduleReq) GetFieldNum() int32 {
	if m != nil {
		return m.FieldNum
	}
	return 0
}

func (m *MatchScheduleReq) GetRoundNum() int32 {
	if m != nil {
		return m.RoundNum
	}
	return 0
}

func (m *MatchScheduleReq) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *MatchScheduleReq) GetAmplitude() int32 {
	if m != nil {
		return m.Amplitude
	}
	return 0
}

type MatchScheduleResp struct {
	Schedule             string   `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchScheduleResp) Reset()         { *m = MatchScheduleResp{} }
func (m *MatchScheduleResp) String() string { return proto.CompactTextString(m) }
func (*MatchScheduleResp) ProtoMessage()    {}
func (*MatchScheduleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f34c81a8fca3de3, []int{1}
}

func (m *MatchScheduleResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchScheduleResp.Unmarshal(m, b)
}
func (m *MatchScheduleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchScheduleResp.Marshal(b, m, deterministic)
}
func (m *MatchScheduleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchScheduleResp.Merge(m, src)
}
func (m *MatchScheduleResp) XXX_Size() int {
	return xxx_messageInfo_MatchScheduleResp.Size(m)
}
func (m *MatchScheduleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchScheduleResp.DiscardUnknown(m)
}

var xxx_messageInfo_MatchScheduleResp proto.InternalMessageInfo

func (m *MatchScheduleResp) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func init() {
	proto.RegisterType((*MatchScheduleReq)(nil), "proto.MatchScheduleReq")
	proto.RegisterType((*MatchScheduleResp)(nil), "proto.MatchScheduleResp")
}

func init() {
	proto.RegisterFile("proto/match-schedule.proto", fileDescriptor_6f34c81a8fca3de3)
}

var fileDescriptor_6f34c81a8fca3de3 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x4d, 0x2c, 0x49, 0xce, 0xd0, 0x2d, 0x4e, 0xce, 0x48, 0x4d, 0x29, 0xcd, 0x49,
	0xd5, 0x03, 0x0b, 0x0a, 0xb1, 0x82, 0x29, 0xa5, 0x59, 0x8c, 0x5c, 0x02, 0xbe, 0x20, 0xf9, 0x60,
	0xa8, 0x74, 0x50, 0x6a, 0xa1, 0x90, 0x0c, 0x17, 0x67, 0x41, 0x4e, 0x62, 0x65, 0x6a, 0x91, 0x5f,
	0x69, 0xae, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x42, 0x40, 0x48, 0x8a, 0x8b, 0x23, 0x2d,
	0x33, 0x35, 0x27, 0x05, 0x24, 0xc9, 0x04, 0x96, 0x84, 0xf3, 0x41, 0x72, 0x45, 0xf9, 0xa5, 0x79,
	0x60, 0x39, 0x66, 0x88, 0x1c, 0x8c, 0x2f, 0x24, 0xc4, 0xc5, 0x92, 0x9b, 0x9f, 0x92, 0x2a, 0xc1,
	0x02, 0x16, 0x07, 0xb3, 0x41, 0x36, 0x25, 0xe6, 0x16, 0xe4, 0x64, 0x96, 0x94, 0xa6, 0xa4, 0x4a,
	0xb0, 0x42, 0x6c, 0x82, 0x0b, 0x28, 0xe9, 0x73, 0x09, 0xa2, 0xb9, 0xad, 0xb8, 0x00, 0x64, 0x05,
	0xcc, 0x2b, 0x60, 0xb7, 0x71, 0x06, 0xc1, 0xf9, 0x46, 0x01, 0x5c, 0x3c, 0x10, 0x0d, 0xa9, 0x45,
	0x65, 0x99, 0xc9, 0xa9, 0x42, 0x0e, 0x5c, 0xdc, 0xee, 0xa9, 0x25, 0x30, 0xed, 0x42, 0xe2, 0x10,
	0xbf, 0xeb, 0xa1, 0x7b, 0x58, 0x4a, 0x02, 0xbb, 0x44, 0x71, 0x41, 0x12, 0x1b, 0x58, 0xc2, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xdb, 0x19, 0x7b, 0x4b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MatchServiceClient is the client API for MatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MatchServiceClient interface {
	GetSchedule(ctx context.Context, in *MatchScheduleReq, opts ...grpc.CallOption) (*MatchScheduleResp, error)
}

type matchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchServiceClient(cc grpc.ClientConnInterface) MatchServiceClient {
	return &matchServiceClient{cc}
}

func (c *matchServiceClient) GetSchedule(ctx context.Context, in *MatchScheduleReq, opts ...grpc.CallOption) (*MatchScheduleResp, error) {
	out := new(MatchScheduleResp)
	err := c.cc.Invoke(ctx, "/proto.MatchService/GetSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServiceServer is the server API for MatchService service.
type MatchServiceServer interface {
	GetSchedule(context.Context, *MatchScheduleReq) (*MatchScheduleResp, error)
}

// UnimplementedMatchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMatchServiceServer struct {
}

func (*UnimplementedMatchServiceServer) GetSchedule(ctx context.Context, req *MatchScheduleReq) (*MatchScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}

func RegisterMatchServiceServer(s *grpc.Server, srv MatchServiceServer) {
	s.RegisterService(&_MatchService_serviceDesc, srv)
}

func _MatchService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MatchService/GetSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).GetSchedule(ctx, req.(*MatchScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MatchService",
	HandlerType: (*MatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchedule",
			Handler:    _MatchService_GetSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/match-schedule.proto",
}
